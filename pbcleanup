#!/usr/bin/env python3
"""
    pbcleanup

        Given a base group, it deletes all associated
        sub-groups and campaigns.

        This is done simply by name matching - so assumes that
        these have been added in a regular way by our scripts.

"""

import sys
import requests
from pbsettings import URL, GOPHISH_KEY
from pbgophish import delete_group, delete_camp


def main():
    if len(sys.argv) < 2:
        sys.exit(
            "\n Usage: pbcleanup  <usergroup> \n"
            "\n e.g pbcleanup MOFF16  \n"
        )
    base_group = sys.argv[1]

    # get list of groups from the server
    #
    full_url = URL + "/api/groups"
    resp = requests.get(full_url, params=GOPHISH_KEY)
    groups = resp.json()

    # is the target group among them?
    #
    found = False
    for group in groups:
        if group["name"] == base_group:
            print("Found target group: ", base_group)
            found = True
    if not found:
        exit_msg = "[Error] target group: '" + base_group + "' not found."
        sys.exit(exit_msg)

    # ...and delete 'em - 
    #
    deleted = 0
    for group in groups:
        if (base_group in group["name"]) and \
                (base_group != group["name"]):
            delete_group(group["id"], group["name"])
            deleted += 1
    if deleted > 0:
        print("[OK] Deleted ", deleted, " subgroups")
    else:
        print("[Error] No sub-groups found to delete")

    # Campaigns are simpler; delete all with 'target_group' in their name...
    #
    full_url = URL + "/api/campaigns"
    resp = requests.get(full_url, params=GOPHISH_KEY)
    campaigns = resp.json()

    deleted = 0
    for camp in campaigns:
        if base_group in camp["name"]:
            delete_camp(camp["id"], camp["name"])
            deleted += 1
    if deleted > 0:
        print("[OK] Deleted ", deleted, " campaigns")
    else:
        print("[Error] No campaigns found to delete")


# ------------ end of main() ----------------------------

if __name__ == '__main__':
    sys.exit(main())
