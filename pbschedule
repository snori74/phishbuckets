#!/usr/bin/env python3
"""
pbschedule <usergroup> <start-date> <phish_set> <sched_name>

    - scheduling the mailshots by API, using the 'launch_date' attribute

"""

import datetime
import sys
import time

from pbos import check_date
from pbconfig import (
    get_mailshot_time, get_phishes
)
from pbgophish import (
    check_for_subgroups, check_group, check_templates, check_smtp_profiles,
    check_scare_page, create_sub, mailshots
)
from pbsettings import PHISH_MASTER

def main():
    if len(sys.argv) < 5:
        sys.exit(
            "\n Usage: pbschedule <group> <start-date> <phish_set> <sched_name>"
            "\n "
            "\n e.g     pbschedule ACME0816 15/5/2017 SECOND blaster"
            "\n         pbcreateplan ACME0816 now SECOND"
            "\n         (if we chose 'now', we don't need a schedule)"
            "\n "
        )

    # Commandline params
    base_group = sys.argv[1]
    start_date = sys.argv[2]
    phish_set = sys.argv[3]
    sched_name = sys.argv[4]

    #   Check that everything is OK
    check_date(start_date)
    # check_config #(API key etc)
    base_group_object = check_group(base_group)
    phishes = get_phishes(phish_set)
    get_mailshot_time(sched_name)
    check_templates(phishes)
    check_smtp_profiles(phishes)
    check_scare_page(base_group)

    #   Now start working...
    sub_group = create_subgroup_structure(base_group)
    populate_subgroups(base_group_object, sub_group)
    for x in range(0, 10):
        create_sub(sub_group[x]["name"], sub_group[x]["targets"])
        time.sleep(1)  # because it has been locking sometimes...

    # And check that all went OK
    check_for_subgroups(base_group)

    #   Schedule the mailshots and results collection, with
    #   the option of picking any of several sets of schedules
    #   or 'now' to do them all immediately
    mailshots(base_group, start_date, phish_set, sched_name)

    # Display the queued up jobs
    # show_queued(base_group)


def create_subgroup_structure(base_group):
    sub_group = []
    for x in range(0, 10):
        sub_name = base_group + "-" + str(x)
        sub_group.append({"name": sub_name, "targets": []})
    return sub_group


def populate_subgroups(base_group_object, sub_group):
    """Split the email addresses from the base group into the ten subgroups."""
    from random import shuffle

    target_user_index = 0
    had_to_loop = False

    # We now shuffle the targets so that staff don't get 
    # same/similar 'phishes' on successive campaigns
    shuffle(base_group_object['targets'])

    num_of_targets = len(base_group_object["targets"])

    while not had_to_loop:
        for x in range(0, 10):  # for each of the ten sub-groups
            target = base_group_object["targets"][target_user_index]
            sub_group[x]["targets"].append(target)
            target_user_index += 1
            # if we have too few users, we loop around to the top
            if target_user_index > num_of_targets - 1:
                had_to_loop = True
                target_user_index = 0


if __name__ == '__main__':
    sys.exit(main())

